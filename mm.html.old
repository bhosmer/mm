<!DOCTYPE html>
<html lang="en">

<head>
  <title></title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />
  <link type="text/css" rel="stylesheet" href="main.css" />
</head>

<body>
  <div id="container"></div>
  <div id="info">mm hey</div>

  <script type="x-shader/x-vertex" id="vertexshader">
      attribute float pointSize;
      attribute vec3 pointColor;
      varying vec3 vColor;

      void main() {
      	vColor = pointColor;
      	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      	gl_PointSize = pointSize * ( 250.0 / -mvPosition.z );
      	gl_Position = projectionMatrix * mvPosition;
      }
    </script>

  <script type="x-shader/x-fragment" id="fragmentshader">
			uniform vec3 color;
			uniform sampler2D pointTexture;
      uniform float alphaTest;
			varying vec3 vColor;

      void main() {
        vec4 outColor = texture2D( pointTexture, gl_PointCoord );
				if ( outColor.a < 0.5 ) discard;
        gl_FragColor = vec4( color * vColor, 1.0 );
      	gl_FragColor = gl_FragColor * outColor;
      	if ( gl_FragColor.a < alphaTest ) discard;
      }
		</script>

  <!-- <script type="importmap">
			{
				"imports": {
					"three": "../build/three.module.js"
				}
			}
		</script> -->

  <script src="https://threejs.org/build/three.js"></script>

  <script type="module">

    // import * as THREE from 'three'
    import { OrbitControls } from './examples/jsm/controls/OrbitControls.js'
    import Stats from './examples/jsm/libs/stats.module.js';
    import * as vis from './vis/mmvis.js'

    import { EffectComposer } from './examples/jsm/postprocessing/EffectComposer.js';
    import { RenderPass } from './examples/jsm/postprocessing/RenderPass.js';
    import { AfterimagePass } from './examples/jsm/postprocessing/AfterimagePass.js';

    let scene, camera, renderer, composer
    let stats


    function init() {

      let container = document.getElementById('container')

      //

      camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 5, 10000);
      camera.position.x = -1000
      camera.position.y = 1000
      camera.position.z = 1000

      //

      scene = vis.createScene()

      //

      renderer = new THREE.WebGLRenderer()
      renderer.setPixelRatio(window.devicePixelRatio)
      renderer.setSize(window.innerWidth, window.innerHeight)
      container.appendChild(renderer.domElement)

      composer = new EffectComposer(renderer)
      composer.addPass(new RenderPass(scene, camera))
      composer.addPass(new AfterimagePass(0.8))

      //

      var _ = new OrbitControls(camera, renderer.domElement)

      //

      stats = new Stats();
      container.appendChild(stats.dom)

      //

      window.addEventListener('resize', onWindowResize, false)
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight
      camera.updateProjectionMatrix()
      composer.setSize(window.innerWidth, window.innerHeight)
      renderer.setSize(window.innerWidth, window.innerHeight)
    }

    function animate(now) {
      requestAnimationFrame(animate)
      render(now)
      stats.update()
    }

    function render(now) {
      vis.bump(now)
      composer.render(scene, camera)
    }

    // main

    init()
    animate()

  </script>
</body>

</html>